// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  credit           Int       @default(5)  // Add the credit field with a default value of 5
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  account Account []

  ideas Idea[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId 
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int? 
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Idea {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  title String?
  description String?
  category String?
  tags String?
  status IdeaStatus @default(OPEN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  milestones  Milestone[] @relation("IdeaMilestones")
  suggestionLogs SuggestionLog[] @relation("IdeaSugesstion") // Add a field to store AI suggestion logs


}

model Milestone {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  ideaId      String   @db.ObjectId
  idea        Idea     @relation(fields: [ideaId], references: [id], onDelete: Cascade, name: "IdeaMilestones")
  title       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SuggestionLog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  ideaId      String   @db.ObjectId
  idea        Idea     @relation(fields: [ideaId], references: [id], onDelete: Cascade, name: "IdeaSugesstion")
  response    String?  // Store the AI suggestion response
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum IdeaStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
}
